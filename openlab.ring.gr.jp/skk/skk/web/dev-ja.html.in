<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="ja">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=euc-jp">
        <title>SKK Openlab - 開発</title>
        <link href="common.css" rel="stylesheet" type="text/css">
        <link href="index-j.html" rel="index">
        <link rev="MADE" href="mailto:skk@ring.gr.jp">

        <style>
         pre {
             font-size: small;   
             border: 1px solid black;
             background-color: #eee;
         }
        </style>
    </head>

    <body>
        <div id="globalnav">
            <ul>
                <li><a href="index-j.html" name="top">トップ</a></li>
                <li><a href="dic-ja.html">SKK 辞書</a> (<a href="dic" title="DownloadDic">ダウンロード</a>, <a href="wiki/wiki.cgi?page=FrontPage">Wiki</a>)</li>
                <li><a href="ddskk-ja.html">DDSKK</a> (<a href="maintrunk" title="DownloadSKK">ダウンロード</a>)</li>
                <li><a href="doc-ja.html">ドキュメント</a></li>
                <li><a href="ml-ja.html">メーリングリスト</a></li>
                <li>開発</a></li>
                <li><a href="wiki/wiki.cgi?page=%A5%EA%A5%F3%A5%AF%BD%B8">リンク</a></li>
            </ul>
        </div>

        <h1>SKK Openlab での開発</h1>

        <div id="langswitch"><a href="cvs.html">English</a></div>

        <h2>目次</h2>
        <ol>
            <li><a href="#introduction">開発ツールの変更について</a></li>
            <li><a href="#dev_git">git/github.com による開発</a></li>
            <li><a href="#dev_cvs">cvs/openlab.jp による開発</a></li>
        </ol>

        <h2>1. 開発ツールの変更について</h2>

        <p>2014年12月、ddskk 及び skktools の開発ツールを cvs から github へ変更しました。</p>
        <ul>
            <li><a href="http://mail.ring.gr.jp/skk/201412/msg00012.html">http://mail.ring.gr.jp/skk/201412/msg00012.html</a></li>
            <li><a href="http://mail.ring.gr.jp/skk/201412/msg00061.html">http://mail.ring.gr.jp/skk/201412/msg00061.html</a></li>
        </ul>

        <h2>2. git/github.com による開発</h2>

        <p>ddskk 及び skktools は github を利用して開発しています。</p>

        <p>開発の流れなどは、次のドキュメントを参考にしてください。<br>
            GitHub による開発の流れについて (<a href="https://github.com/skk-dev/ddskk/blob/master/READMEs/Development.ja.org">https://github.com/skk-dev/ddskk/blob/master/READMEs/development.ja.org</a>) </p>

        <h3>2.1. SKK git レポジトリ構成</h3>

        <p>github で開発を行う際のレポジトリは、以下のような構成になっています。</p>
        <p>upstream および origin は github のサーバ上にあるレポジトリとなっていて、おもに WEB ブラウザを経由して操作をします。</p>
        <p>一方で local は手元の PC 上のレポジトリとなっていて、git checkout (ブランチ名) でブランチを切り替えることができます。
            ブランチの中で行った改変は、git コマンドを使用しない限り他のブランチの内容には影響しません。</p>

<pre>
   +------------------------------------- +  (fork)   +------------------------------------------+
   | upstream                             | --------> | origin (masterブランチ)                   |
   |  -> https://github.com/skk-dev/ddskk |           |  -> git@github.com:YOURACCOUNT/ddskk.git |
   +--------------------------------------+           +------------------------------------------+
                ^    |                                                            |
                |    |                                                            |
                |    |           $ git clone git@github.com:YOURACCOUNT/ddskk.git | 
                |    |                                                            |
                |    |                                                            V
                |    |                                    +-----------------------------------+
                |    +----------------------------------> | local   (masterブランチ)           |      
                |     $ git pull upstream master:master   |   ->   手元の PC                   |
                |                                         +-----------------------------------+
                |                                                |
                |                                                | $ git branch REFACTOR
                |                                                | $ git checkout REFACTOR
                |                                                |    (REFACTORは例としてつけた名称です)
                |                                                V
                |                                         +-----------------------------------+
                |                                         | local  (REFACTORブランチ)          |
                |                                         |   改良作業はここで行う               |
                |                                         |   改良後 git add -u && git commit  |
                |                                         +-----------------------------------+
                |                                                |
                |                                                | $ git push origin REFACTOR:REFACTOR
                |                                                |
                |                                                V
                |                                     +------------------------------------------+
                +------------------------------------ | origin  (REFACTORブランチ)                |
                    (pull-request)                    |  -> git@github.com:YOURACCOUNT/ddskk.git |
                                                      +------------------------------------------+
</pre>

<h3></a>2.2. git の入手方法(UN*X環境)</h3>

<p>ご利用のUN*X環境によっては git の開発環境がインストールされていないことがあります。</p>
<p>git のインストールに関しては、<a href="http://git-scm.com/book/ja/v1/%E4%BD%BF%E3%81%84%E5%A7%8B%E3%82%81%E3%82%8B-Git%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">http://git-scm.com/book/ja/v1/使い始める-Gitのインストール</a>などのサイトを参照下さい。</p>

<h3>2.3. git の入手方法(Windows環境)</h3>

<p><a href="https://msysgit.github.io/">https://msysgit.github.io/</a> より Git for Windows を入手します。</p>

<p> インストールする要素の選択（Select Components）は、[Windows Explorer integration]
    および [Associate .sh files to be run with Bash] のチェックを外し、次に進みます。</p>

<p> SKK ディストリビューションは、Windows のバッチファイルを含むため、リポジトリの改行コード(LF or CRLF)を保つために、
改行コードの変換設定（Configuring the line ending conversions）は、
[Checkout as-is, commit as-is] にチェッックを入れてください。</p>

<p>なお、Windows 環境では cvs と同様に cygwin を利用することも可能です。</p>
<p>cygwin を使用した場合と、上記の Git for Windows を利用する場合では、
shell を起動したときのホームディレクトリが異なることに注意して下さい。</p>
<p>デフォルトのインストールでは、Windows のログイン ID を LOGINID としたときにホームディレクトリは以下のようになります。</p>

<dl>
    <dt>Git for Windows</dt>
    <dd>c:\Users\LOGINID\</dd>

    <dt>cygwin</dt>
    <dd>c:\cygwin\home\LOGINID\   (または、 c:\cygwin64\home\LOGINID\) </dd>
</dl>

<h3>2.4. git による SKK ソースの入手</h3>

<p>単に最新版のソースをダウンロードする場合は以下のようにして SKK ソースの clone をダウンロードすることができます。</p>

<pre>
     % git clone https://github.com/skk-dev/ddskk
</pre>

<p>開発に参加される方は、前掲「GitHub による開発の流れについて」をご覧ください。</p>
<p>GitHub における開発のためには、<a href="https://github.com">https://github.com</a>
のアカウントを登録する必要があります。詳しくは GitHub のサイトの案内を参照して下さい。</p>

<h2>3. cvs/openlab.jp による開発</h2>

<p>main (=> skk-dev/ddskk) 及び tools (=> skk-dev/skktools) 以外は、従来と変わりません。</p>

<h3>3.1. SKK cvs レポジトリ構成</h3>

<pre>
     $CVSROOT(openlab.jp:/circus/cvsroot)
        |
        |
        +-- skk --+-- <strike>main (Main distribution -- Emacs Lisp, tutorials, etc)</strike>
                  |   ※ github へ変更しました
                  |
                  +-- dic (Dictionaries)
                  |
                  |
                  +-- <strike>tools (Dictionary maintenance tools)</strike>
                  |   ※ github へ変更しました
                  |
                  +-- skkserv (Dictionary server)
                  |
                  |
                  +-- pySKK (SKK related libraries using python)
                  |
                  |
                  +-- web (Web page html files)
</pre>

<h3>3.2. CVS の入手方法</h3>

<p>CVS は <a href="http://ftp.gnu.org/non-gnu/cvs/">http://ftp.gnu.org/non-gnu/cvs/</a> で配布されています。

<p>CVS に関する情報は</p>

<ul>
<li><a href="http://www.nongnu.org/cvs/">http://www.nongnu.org/cvs/</a></li>
</ul>

<p>から入手可能です。また、CVS に関する日本語の情報として、以下のようなページがあります。</p>

<ul>
  <li><a href="http://vox.nishimotz.com/cvs/cvs.html">http://vox.nishimotz.com/cvs/cvs.html</a>
  <li><a href="http://www.itojun.org/hack/cvs/tut-kernel.html">http://www.itojun.org/hack/cvs/tut-kernel.html</a>
</ul>

<p>なお、Emacs には <span id="pcvs">pcvs (pcl-cvs)</span> というフロントエンドが付属しています。</p>

<h3>3.3. CVS による SKK ソースの入手</h3>

<p>ゲストアカウントで openlab.jp の cvs server にログインします。</p>

<pre>
     % cvs -d :pserver:guest@openlab.jp:/circus/cvsroot login
</pre>

<p>パスワードの入力を促すプロンプトが出るので、パスワードとして <kbd>guest</kbd> を入れ、<kbd>RET</kbd> しましょう。</p>

<pre>
     CVS password: guest [RET]
</pre>

<p>~/.cvspass というファイルにパスワードが記録され、次からは入力不要になります。 <span id="footnote-1"><a href="#footnote1">(*注1)</a></span></p>

<p>次に DDSKK のソースを取得します (このファイルを作業コピーといいます)。 <span id="footnote-2"><a href="#footnote2">(*注2)</a></span></p>

<pre>
     % cvs -d :pserver:guest@openlab.jp:/circus/cvsroot checkout skk/main
</pre>

<p>カレントディレクトリの下にできる skk/main (作業ディレクトリ) にコピーが作成されます。</p>

<p>手元のソースを最新に更新するには作業ディレクトリに移動して<kbd>cvs update</kbd>を実行します。</p>

<pre>
     % cd skk/main
     % cvs update -dP
</pre>

<h3>3.4. コミッタのためのガイド</h3>

<h4>3.4.1. CVS での開発参加</h4>

<p>openlab.jp に SSH2 公開鍵 (OpenSSH) を登録することで開発に参加できます。まず SSH2 公開鍵 (OpenSSH) を <a href="mailto:skk-owner@ring.gr.jp">skk-owner@ring.gr.jp</a> 宛てに送付して下さい。登録完了の通知をお送りします。</p>

<p>SSH 経由のアクセスにおいては <kbd>cvs login</kbd> は必要ありません。skk-cvs というアカウントをコミッタ全員共通で使用します。ソースを取得するには以下のコマンドを実行します。</p>

<pre>
     % cvs -d:ext:skk-cvs@openlab.jp:/circus/cvsroot checkout skk/main
</pre>

<p>また、取得済みのソースを最新に更新するには作業ディレクトリで以下を実行します。</p>

<pre>
     % cvs update -dP
</pre>

<h4>3.4.2. コミット</h4>

<p>下記の手順を踏んでコミットして下さいね。</p>

<ul>

  <li>まず作業ディレクトリのソースを自分の環境でコンパイル &amp; インストールします。</li>

  <li>動作確認をして下さい。

    <ul>
      <li> 一度、SKK を起動 &amp; 終了して問題がないことを確認します。</li>
      <li> 同じことを <kbd>emacs -Q</kbd> 下でもう一度確認します (できれば空の ~/.skk で)。</li>
    </ul></li>

  <li>変更の要点をその SKK で書きます。</li>

  <li>その間も問題がなければ、作業ディレクトリにて <kbd>cvs commit</kbd> します。</li>

  <li>問題なければ書いた変更の要点を <a href="mailto:skk@ring.gr.jp">skk@ring.gr.jp</a> に投稿して下さい。</li>

  <li>ChangeLog の更新をお忘れなく。英語で書いていますが、英語が苦痛なら日本語で書いても全然問題ありません。 <span id="footnote-3"><a href="#footnote3">(*注3)</a></span></li>

</ul>

<pre>
     % cd skk/main
     % cvs commit -m "Update." ChangeLog
     % cvs commit -m "あなたのコメントをここに。" skk.el
</pre>

<div id="footnote-sec">
  <h4>脚注</a></h4>

<h5 id="footnote1">注1</h5>

<p>サーバーの情報は作業ディレクトリ下に記録されるので、作業ディレクトリでCVS コマンド (<kbd>checkout</kbd>, <kbd>update</kbd>, <kbd>commit</kbd> など) を実行すると、自動的に openlab.jp にログインして、それぞれのコマンドを実行します。</p>

<h5 id="footnote2">注2</h5>

<p>~/.cvsrc に</p>

<pre>
     cvs -z3
</pre>

<p>と書いておくと、サーバーとの通信内容が圧縮されます。数字が大きい程圧縮率が高いのですが、圧縮率が高い程サーバの負担が高いので、<kbd>-z3</kbd> ぐらいが丁度良いようです。</p>

<h5 id="footnote3">注3</h5>

<p>CVS の Emacs 用フロントエンド <a href="#pcvs">pcl-cvs</a> (pcvs) を使う場合、コミットのために <kbd>C</kbd> キー (<kbd>cvs-mode-changelog-commit</kbd>) を押すと ChangeLog から当日コミッタ自身が書いた部分を抜き出して、ログを書く手助けをしてくれます。</p>
</div>

<div id="move"><a href="#top">目次へ</a></div>

<div id="mailto">mailto: <a href="mailto:skk@ring.gr.jp">skk@ring.gr.jp</a></div>
<div id="modtime">Last Modified: $Date: 2017/07/02 06:31:22 $</div>
</body>
</html>
